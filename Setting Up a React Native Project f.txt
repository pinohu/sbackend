Setting Up a React Native Project for SuiteDash Integration
Let me walk you through the complete process of setting up a React Native project that integrates with SuiteDash's API:
1. Initial Project Setup
First, let's create a new React Native project and install the necessary dependencies:
bash# Install React Native CLI if you don't have it
npm install -g react-native-cli

# Create a new React Native project
npx react-native init SuiteDashApp

# Navigate to the project directory
cd SuiteDashApp

# Install essential dependencies
npm install axios @react-navigation/native @react-navigation/stack react-native-screens react-native-safe-area-context
npm install @react-native-async-storage/async-storage
npm install react-native-gesture-handler
npm install react-native-reanimated
npm install react-native-paper
npm install react-native-vector-icons
2. Configure SuiteDash API Service
Create a dedicated API service file to handle all communication with SuiteDash:
javascript// src/services/suiteDashApi.js

import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Base configuration
const API_BASE_URL = 'https://app.suitedash.com/secure-api';
const PUBLIC_ID = 'YOUR_PUBLIC_ID'; // Replace with your SuiteDash Public ID
const SECRET_KEY = 'YOUR_SECRET_KEY'; // Replace with your SuiteDash Secret Key

// Create axios instance with default config
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'X-Public-ID': PUBLIC_ID,
    'X-Secret-Key': SECRET_KEY
  },
  timeout: 15000 // 15 seconds timeout
});

// Add response interceptor for error handling
apiClient.interceptors.response.use(
  response => response,
  async error => {
    // Handle API rate limiting or authentication errors
    if (error.response && error.response.status === 429) {
      console.log('Rate limit exceeded. Please try again later.');
    }
    
    return Promise.reject(error);
  }
);

// Cache mechanism
const cacheData = async (key, data, expirationMinutes = 10) => {
  try {
    const item = {
      data,
      expiry: Date.now() + expirationMinutes * 60 * 1000
    };
    await AsyncStorage.setItem(key, JSON.stringify(item));
  } catch (error) {
    console.error('Error caching data:', error);
  }
};

const getCachedData = async (key) => {
  try {
    const value = await AsyncStorage.getItem(key);
    if (!value) return null;
    
    const item = JSON.parse(value);
    if (Date.now() > item.expiry) {
      await AsyncStorage.removeItem(key);
      return null;
    }
    
    return item.data;
  } catch (error) {
    console.error('Error retrieving cached data:', error);
    return null;
  }
};

// The API service
export const suiteDashApi = {
  // Authentication
  async checkAuth() {
    try {
      const response = await apiClient.get('/contacts?per_page=1'); // Minimal API call to test auth
      return response.status === 200;
    } catch (error) {
      console.error('Authentication check failed:', error);
      return false;
    }
  },
  
  // Contacts
  async getContacts(page = 1, perPage = 20, useCache = true) {
    const cacheKey = `contacts_p${page}_n${perPage}`;
    
    // Try to get from cache first if useCache is true
    if (useCache) {
      const cachedData = await getCachedData(cacheKey);
      if (cachedData) return cachedData;
    }
    
    try {
      const response = await apiClient.get(`/contacts?page=${page}&per_page=${perPage}`);
      
      // Cache the successful response
      if (useCache) {
        await cacheData(cacheKey, response.data);
      }
      
      return response.data;
    } catch (error) {
      console.error('Error fetching contacts:', error);
      throw error;
    }
  },
  
  async getContactById(id, useCache = true) {
    const cacheKey = `contact_${id}`;
    
    if (useCache) {
      const cachedData = await getCachedData(cacheKey);
      if (cachedData) return cachedData;
    }
    
    try {
      const response = await apiClient.get(`/contact/${id}`);
      
      if (useCache) {
        await cacheData(cacheKey, response.data);
      }
      
      return response.data;
    } catch (error) {
      console.error(`Error fetching contact with ID ${id}:`, error);
      throw error;
    }
  },
  
  async createContact(contactData) {
    try {
      const response = await apiClient.post('/contacts', contactData);
      return response.data;
    } catch (error) {
      console.error('Error creating contact:', error);
      throw error;
    }
  },
  
  // Projects
  async getProjects(page = 1, perPage = 20, useCache = true) {
    const cacheKey = `projects_p${page}_n${perPage}`;
    
    if (useCache) {
      const cachedData = await getCachedData(cacheKey);
      if (cachedData) return cachedData;
    }
    
    try {
      const response = await apiClient.get(`/projects?page=${page}&per_page=${perPage}`);
      
      if (useCache) {
        await cacheData(cacheKey, response.data);
      }
      
      return response.data;
    } catch (error) {
      console.error('Error fetching projects:', error);
      throw error;
    }
  },
  
  async getProjectById(id, useCache = true) {
    const cacheKey = `project_${id}`;
    
    if (useCache) {
      const cachedData = await getCachedData(cacheKey);
      if (cachedData) return cachedData;
    }
    
    try {
      const response = await apiClient.get(`/project/${id}`);
      
      if (useCache) {
        await cacheData(cacheKey, response.data);
      }
      
      return response.data;
    } catch (error) {
      console.error(`Error fetching project with ID ${id}:`, error);
      throw error;
    }
  },
  
  // Files
  async getProjectFiles(projectId, useCache = true) {
    const cacheKey = `files_project_${projectId}`;
    
    if (useCache) {
      const cachedData = await getCachedData(cacheKey);
      if (cachedData) return cachedData;
    }
    
    try {
      const response = await apiClient.get(`/files?project_id=${projectId}`);
      
      if (useCache) {
        await cacheData(cacheKey, response.data);
      }
      
      return response.data;
    } catch (error) {
      console.error(`Error fetching files for project ${projectId}:`, error);
      throw error;
    }
  },
  
  // Tasks
  async getTasks(page = 1, perPage = 20, useCache = true) {
    const cacheKey = `tasks_p${page}_n${perPage}`;
    
    if (useCache) {
      const cachedData = await getCachedData(cacheKey);
      if (cachedData) return cachedData;
    }
    
    try {
      const response = await apiClient.get(`/tasks?page=${page}&per_page=${perPage}`);
      
      if (useCache) {
        await cacheData(cacheKey, response.data);
      }
      
      return response.data;
    } catch (error) {
      console.error('Error fetching tasks:', error);
      throw error;
    }
  },
  
  // Clear all cached data
  async clearCache() {
    try {
      const keys = await AsyncStorage.getAllKeys();
      const suiteDashKeys = keys.filter(key => 
        key.startsWith('contacts_') || 
        key.startsWith('contact_') || 
        key.startsWith('projects_') || 
        key.startsWith('project_') || 
        key.startsWith('files_') ||
        key.startsWith('tasks_')
      );
      
      await AsyncStorage.multiRemove(suiteDashKeys);
      return true;
    } catch (error) {
      console.error('Error clearing cache:', error);
      return false;
    }
  }
};
3. Create Context for State Management
Set up a context to manage SuiteDash data throughout your app:
javascript// src/context/SuiteDashContext.js

import React, { createContext, useState, useContext, useEffect } from 'react';
import { suiteDashApi } from '../services/suiteDashApi';

// Create context
const SuiteDashContext = createContext();

// Custom hook for using the context
export const useSuiteDash = () => useContext(SuiteDashContext);

// Provider component
export const SuiteDashProvider = ({ children }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [error, setError] = useState(null);
  
  // Check authentication on mount
  useEffect(() => {
    const checkAuth = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const authStatus = await suiteDashApi.checkAuth();
        setIsAuthenticated(authStatus);
      } catch (error) {
        setError('Failed to connect to SuiteDash');
        setIsAuthenticated(false);
      } finally {
        setIsLoading(false);
      }
    };
    
    checkAuth();
  }, []);
  
  // Refresh app data
  const refreshData = async () => {
    await suiteDashApi.clearCache();
    // Check auth status again
    const authStatus = await suiteDashApi.checkAuth();
    setIsAuthenticated(authStatus);
  };
  
  // Context value
  const value = {
    isLoading,
    isAuthenticated,
    error,
    refreshData,
    // Additional helper functions could be added here
  };
  
  return (
    <SuiteDashContext.Provider value={value}>
      {children}
    </SuiteDashContext.Provider>
  );
};
4. Create Navigation Structure
Set up the navigation structure for your app:
javascript// src/navigation/AppNavigator.js

import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { useSuiteDash } from '../context/SuiteDashContext';

// Import your screens
import LoadingScreen from '../screens/LoadingScreen';
import ErrorScreen from '../screens/ErrorScreen';
import HomeScreen from '../screens/HomeScreen';
import ContactsScreen from '../screens/ContactsScreen';
import ContactDetailsScreen from '../screens/ContactDetailsScreen';
import ProjectsScreen from '../screens/ProjectsScreen';
import ProjectDetailsScreen from '../screens/ProjectDetailsScreen';

const Stack = createStackNavigator();

export default function AppNavigator() {
  const { isLoading, isAuthenticated, error } = useSuiteDash();
  
  // Show loading screen while checking authentication
  if (isLoading) {
    return <LoadingScreen />;
  }
  
  // Show error screen if there's an error
  if (error) {
    return <ErrorScreen message={error} />;
  }
  
  // Show main app navigation if authenticated
  if (isAuthenticated) {
    return (
      <NavigationContainer>
        <Stack.Navigator initialRouteName="Home">
          <Stack.Screen name="Home" component={HomeScreen} options={{ title: 'Dashboard' }} />
          <Stack.Screen name="Contacts" component={ContactsScreen} options={{ title: 'Contacts' }} />
          <Stack.Screen 
            name="ContactDetails" 
            component={ContactDetailsScreen} 
            options={({ route }) => ({ title: route.params.contactName || 'Contact Details' })} 
          />
          <Stack.Screen name="Projects" component={ProjectsScreen} options={{ title: 'Projects' }} />
          <Stack.Screen 
            name="ProjectDetails" 
            component={ProjectDetailsScreen} 
            options={({ route }) => ({ title: route.params.projectName || 'Project Details' })} 
          />
        </Stack.Navigator>
      </NavigationContainer>
    );
  }
  
  // If not authenticated, you could show a login screen instead
  return <ErrorScreen message="Authentication failed. Please check your API credentials." />;
}
5. Create Essential Screens
Now, let's create some of the key screens for your app:
Home Screen
javascript// src/screens/HomeScreen.js

import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';
import { useSuiteDash } from '../context/SuiteDashContext';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

export default function HomeScreen({ navigation }) {
  const { refreshData } = useSuiteDash();
  
  const menuItems = [
    {
      title: 'Contacts',
      icon: 'account-group',
      onPress: () => navigation.navigate('Contacts'),
      color: '#4A90E2'
    },
    {
      title: 'Projects',
      icon: 'briefcase',
      onPress: () => navigation.navigate('Projects'),
      color: '#50C878'
    },
    {
      title: 'Files',
      icon: 'file-document',
      onPress: () => navigation.navigate('Files'),
      color: '#F5A623'
    },
    {
      title: 'Tasks',
      icon: 'checkbox-marked-circle',
      onPress: () => navigation.navigate('Tasks'),
      color: '#E74C3C'
    }
  ];
  
  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Your SuiteDash Portal</Text>
        <TouchableOpacity onPress={refreshData} style={styles.refreshButton}>
          <Icon name="refresh" size={24} color="#4A90E2" />
        </TouchableOpacity>
      </View>
      
      <View style={styles.menuGrid}>
        {menuItems.map((item, index) => (
          <TouchableOpacity
            key={index}
            style={[styles.menuItem, { backgroundColor: item.color }]}
            onPress={item.onPress}
          >
            <Icon name={item.icon} size={36} color="#FFF" />
            <Text style={styles.menuItemText}>{item.title}</Text>
          </TouchableOpacity>
        ))}
      </View>
      
      <View style={styles.infoBox}>
        <Text style={styles.infoTitle}>SuiteDash Mobile</Text>
        <Text style={styles.infoText}>
          Access your SuiteDash portal on the go. Manage contacts, projects, tasks, and files from
          anywhere, anytime.
        </Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#FFF',
    borderBottomWidth: 1,
    borderBottomColor: '#EEE',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  refreshButton: {
    padding: 8,
  },
  menuGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    padding: 16,
  },
  menuItem: {
    width: '48%',
    aspectRatio: 1,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  menuItemText: {
    marginTop: 12,
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFF',
  },
  infoBox: {
    margin: 16,
    padding: 16,
    backgroundColor: '#FFF',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#333',
  },
  infoText: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  }
});
Contacts Screen
javascript// src/screens/ContactsScreen.js

import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  FlatList, 
  StyleSheet, 
  TouchableOpacity, 
  ActivityIndicator,
  TextInput,
  RefreshControl
} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import { suiteDashApi } from '../services/suiteDashApi';

export default function ContactsScreen({ navigation }) {
  const [contacts, setContacts] = useState([]);
  const [filteredContacts, setFilteredContacts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [error, setError] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  
  // Load contacts on component mount
  useEffect(() => {
    loadContacts();
  }, []);
  
  // Filter contacts when searchText changes
  useEffect(() => {
    if (searchText) {
      const filtered = contacts.filter(contact => {
        const fullName = `${contact.first_name} ${contact.last_name}`.toLowerCase();
        return fullName.includes(searchText.toLowerCase()) || 
               (contact.email && contact.email.toLowerCase().includes(searchText.toLowerCase()));
      });
      setFilteredContacts(filtered);
    } else {
      setFilteredContacts(contacts);
    }
  }, [contacts, searchText]);
  
  const loadContacts = async (newPage = 1) => {
    try {
      setLoading(true);
      setError(null);
      
      // If loading first page, reset everything
      if (newPage === 1) {
        setContacts([]);
        setFilteredContacts([]);
        setPage(1);
        setHasMore(true);
      }
      
      const response = await suiteDashApi.getContacts(newPage, 20);
      
      if (response && response.contacts) {
        if (newPage === 1) {
          setContacts(response.contacts);
        } else {
          setContacts(prev => [...prev, ...response.contacts]);
        }
        
        // Check if there's more data to load
        setHasMore(response.contacts.length === 20);
        setPage(newPage);
      } else {
        setHasMore(false);
      }
    } catch (err) {
      setError('Failed to load contacts. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };
  
  const onRefresh = () => {
    setRefreshing(true);
    loadContacts(1);
  };
  
  const loadMore = () => {
    if (!loading && hasMore) {
      loadContacts(page + 1);
    }
  };
  
  const renderContactItem = ({ item }) => (
    <TouchableOpacity
      style={styles.contactItem}
      onPress={() => navigation.navigate('ContactDetails', { 
        contactId: item.id,
        contactName: `${item.first_name} ${item.last_name}`
      })}
    >
      <View style={styles.contactAvatar}>
        <Text style={styles.avatarText}>
          {item.first_name && item.first_name[0]}
          {item.last_name && item.last_name[0]}
        </Text>
      </View>
      <View style={styles.contactInfo}>
        <Text style={styles.contactName}>{item.first_name} {item.last_name}</Text>
        {item.email && <Text style={styles.contactEmail}>{item.email}</Text>}
        {item.phone && <Text style={styles.contactPhone}>{item.phone}</Text>}
      </View>
      <Icon name="chevron-right" size={24} color="#CCC" />
    </TouchableOpacity>
  );
  
  const renderFooter = () => {
    if (!loading || refreshing) return null;
    
    return (
      <View style={styles.footerLoader}>
        <ActivityIndicator size="small" color="#0066cc" />
      </View>
    );
  };
  
  return (
    <View style={styles.container}>
      <View style={styles.searchContainer}>
        <Icon name="magnify" size={20} color="#999" style={styles.searchIcon} />
        <TextInput
          style={styles.searchInput}
          placeholder="Search contacts..."
          value={searchText}
          onChangeText={setSearchText}
          clearButtonMode="while-editing"
        />
      </View>
      
      {error ? (
        <View style={styles.centered}>
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity style={styles.retryButton} onPress={() => loadContacts(1)}>
            <Text style={styles.retryButtonText}>Retry</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <FlatList
          data={filteredContacts}
          keyExtractor={(item) => item.id.toString()}
          renderItem={renderContactItem}
          ListEmptyComponent={
            loading && page === 1 ? (
              <ActivityIndicator size="large" color="#0066cc" style={styles.centered} />
            ) : (
              <Text style={styles.emptyText}>
                {searchText ? 'No matching contacts found' : 'No contacts found'}
              </Text>
            )
          }
          refreshControl={
            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
          }
          onEndReached={loadMore}
          onEndReachedThreshold={0.3}
          ListFooterComponent={renderFooter}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  searchContainer: {
    backgroundColor: '#FFF',
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    margin: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#EEE',
  },
  searchIcon: {
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    height: 40,
    padding: 0,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  contactItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFF',
    padding: 15,
    marginVertical: 4,
    marginHorizontal: 10,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
    elevation: 1,
  },
  contactAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#4A90E2',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  avatarText: {
    color: '#FFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  contactInfo: {
    flex: 1,
  },
  contactName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  contactEmail: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  contactPhone: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  errorText: {
    color: 'red',
    marginBottom: 20,
    textAlign: 'center',
  },
  retryButton: {
    backgroundColor: '#0066cc',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
  },
  retryButtonText: {
    color: '#FFF',
    fontWeight: 'bold',
  },
  emptyText: {
    textAlign: 'center',
    marginTop: 50,
    color: '#666',
  },
  footerLoader: {
    padding: 20,
    alignItems: 'center',
  },
});
6. Set Up the Main App Component
Integrate everything in your main App.js file:
javascript// App.js

import React from 'react';
import { SafeAreaView, StatusBar, StyleSheet } from 'react-native';
import { SuiteDashProvider } from './src/context/SuiteDashContext';
import AppNavigator from './src/navigation/AppNavigator';

const App = () => {
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" />
      <SuiteDashProvider>
        <AppNavigator />
      </SuiteDashProvider>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

export default App;
7. Implement Viral Features
To make your app more viral, add these key components:
Social Sharing Component
javascript// src/components/ShareButton.js

import React from 'react';
import { TouchableOpacity, Share, Alert } from 'react-native';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

export default function ShareButton({ title, message, url, iconSize = 24, color = '#333' }) {
  const onShare = async () => {
    try {
      const result = await Share.share({
        title: title,
        message: message,
        url: url, // Only supported on iOS
      });
      
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // Shared with activity type of result.activityType
          console.log(`Shared via ${result.activityType}`);
        } else {
          // Shared
          console.log('Shared successfully');
        }
      } else if (result.action === Share.dismissedAction) {
        // Dismissed
        console.log('Share dismissed');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  return (
    <TouchableOpacity onPress={onShare} style={{ padding: 8 }}>
      <Icon name="share-variant" size={iconSize} color={color} />
    </TouchableOpacity>
  );
}
Referral Tracking Component
javascript// src/components/ReferralCode.js

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Clipboard, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useSuiteDash } from '../context/SuiteDashContext';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

export default function ReferralCode() {
  const [referralCode, setReferralCode] = useState('');
  const [referrals, setReferrals] = useState(0);
  
  useEffect(() => {
    // Load referral code and count from storage
    loadReferralData();
  }, []);
  
  const loadReferralData = async () => {
    try {
      const code = await AsyncStorage.getItem('referralCode');
      const referralsCount = await AsyncStorage.getItem('referralsCount');
      
      if (code) {
        setReferralCode(code);
      } else {
        // Generate a new referral code if one doesn't exist
        const newCode = generateReferralCode();
        await AsyncStorage.setItem('referralCode', newCode);
        setReferralCode(newCode);
      }
      
      if (referralsCount) {
        setReferrals(parseInt(referralsCount, 10));
      }
    } catch (error) {
      console.error('Error loading referral data:', error);
    }
  };
  
  const generateReferralCode = () => {
    // Generate a random 8-character alphanumeric code
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 8; i++) {
      code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
  };
  
  const copyToClipboard = () => {
    Clipboard.setString(referralCode);
    Alert.alert('Success', 'Referral code copied to clipboard!');
  };
  
  const shareReferralCode = async () => {
    try {
      await Share.share({
        message: `Join me on SuiteDash Mobile App! Use my referral code: ${referralCode} to get started.`,
      });
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };
  
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Your Referral Program</Text>
      <Text style={styles.description}>
        Share your referral code with friends and colleagues. You'll both receive benefits when they sign up!
      </Text>
      
      <View style={styles.codeContainer}>
        <Text style={styles.code}>{referralCode}</Text>
        <TouchableOpacity onPress={copyToClipboard} style={styles.copyButton}>
          <Icon name="content-copy" size={20} color="#4A90E2" />
        </TouchableOpacity>
      </View>
      
      <TouchableOpacity onPress={shareReferralCode} style={RetryClaude hit the max length for a message and has paused its response. You can write Continue to keep the chat going.IContinueEditLet me continue with the implementation of viral features for your SuiteDash mobile app:
Referral Tracking Component (continued)
javascript// src/components/ReferralCode.js (continued)

      <TouchableOpacity onPress={shareReferralCode} style={styles.shareButton}>
        <Icon name="share-variant" size={18} color="#FFF" style={styles.shareIcon} />
        <Text style={styles.shareButtonText}>Share Your Referral Code</Text>
      </TouchableOpacity>
      
      <View style={styles.statsContainer}>
        <View style={styles.statItem}>
          <Text style={styles.statValue}>{referrals}</Text>
          <Text style={styles.statLabel}>Successful Referrals</Text>
        </View>
        
        <View style={styles.statItem}>
          <Text style={styles.statValue}>{referrals * 50}</Text>
          <Text style={styles.statLabel}>Points Earned</Text>
        </View>
      </View>
      
      <Text style={styles.rewardsText}>
        Earn 50 points for each successful referral. Points can be redeemed for premium features and upgrades!
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#FFF',
    borderRadius: 10,
    padding: 16,
    margin: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  description: {
    fontSize: 14,
    color: '#666',
    marginBottom: 16,
    lineHeight: 20,
  },
  codeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
  },
  code: {
    flex: 1,
    fontSize: 20,
    fontWeight: 'bold',
    letterSpacing: 1,
    color: '#333',
  },
  copyButton: {
    padding: 8,
  },
  shareButton: {
    backgroundColor: '#4A90E2',
    borderRadius: 8,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    marginBottom: 16,
  },
  shareIcon: {
    marginRight: 8,
  },
  shareButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  statsContainer: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
    padding: 12,
    backgroundColor: '#F9F9F9',
    borderRadius: 8,
    marginHorizontal: 4,
  },
  statValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4A90E2',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
  },
  rewardsText: {
    fontSize: 12,
    color: '#999',
    fontStyle: 'italic',
    textAlign: 'center',
  },
});
Push Notification Setup
First, install required packages:
bashnpm install @react-native-firebase/app @react-native-firebase/messaging
npx react-native setup-project
Then create a notifications service:
javascript// src/services/notificationService.js

import React, { createContext, useState, useEffect, useContext } from 'react';
import messaging from '@react-native-firebase/messaging';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert, Platform } from 'react-native';

// Create context
const NotificationContext = createContext();

// Custom hook for using notifications
export const useNotifications = () => useContext(NotificationContext);

// Provider component
export const NotificationProvider = ({ children }) => {
  const [token, setToken] = useState('');
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    // Request permission and get token
    const requestUserPermission = async () => {
      try {
        const authStatus = await messaging().requestPermission();
        const enabled =
          authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
          authStatus === messaging.AuthorizationStatus.PROVISIONAL;
        
        if (enabled) {
          console.log('Authorization status:', authStatus);
          await getFCMToken();
        } else {
          console.log('Notification permission denied');
        }
      } catch (error) {
        console.error('Permission request error:', error);
      } finally {
        setLoading(false);
      }
    };
    
    // Load saved notifications
    const loadNotifications = async () => {
      try {
        const savedNotifications = await AsyncStorage.getItem('notifications');
        if (savedNotifications) {
          setNotifications(JSON.parse(savedNotifications));
        }
      } catch (error) {
        console.error('Error loading notifications:', error);
      }
    };
    
    requestUserPermission();
    loadNotifications();
    
    // Listen for foreground messages
    const unsubscribeForeground = messaging().onMessage(async remoteMessage => {
      console.log('Foreground notification received:', remoteMessage);
      const notification = {
        id: remoteMessage.messageId,
        title: remoteMessage.notification?.title || 'New Notification',
        body: remoteMessage.notification?.body || '',
        data: remoteMessage.data,
        timestamp: new Date().toISOString(),
        read: false,
      };
      
      addNotification(notification);
      
      // Show alert for foreground notifications
      Alert.alert(
        notification.title,
        notification.body,
        [{ text: 'OK', onPress: () => console.log('OK Pressed') }],
        { cancelable: true }
      );
    });
    
    // Handle notification opened while app was in background
    messaging().onNotificationOpenedApp(remoteMessage => {
      console.log('Background notification opened:', remoteMessage);
      // Handle navigation to relevant screen based on notification data
      // You would implement this based on your app's navigation structure
    });
    
    // Check if app was opened from a notification (app closed state)
    messaging()
      .getInitialNotification()
      .then(remoteMessage => {
        if (remoteMessage) {
          console.log(
            'App opened from quit state by notification:',
            remoteMessage
          );
          // Handle navigation based on notification data
        }
      });
    
    return () => {
      unsubscribeForeground();
    };
  }, []);
  
  // Get FCM token
  const getFCMToken = async () => {
    try {
      const fcmToken = await messaging().getToken();
      setToken(fcmToken);
      console.log('FCM Token:', fcmToken);
      
      // Store token in AsyncStorage
      await AsyncStorage.setItem('fcmToken', fcmToken);
      
      // Here you would typically send this token to your SuiteDash backend
      // to associate it with the current user
      // You'll need to implement this based on SuiteDash API capabilities
      
      return fcmToken;
    } catch (error) {
      console.error('Error getting FCM token:', error);
      return null;
    }
  };
  
  // Add a new notification
  const addNotification = async (notification) => {
    try {
      const updatedNotifications = [notification, ...notifications];
      setNotifications(updatedNotifications);
      
      // Store in AsyncStorage
      await AsyncStorage.setItem('notifications', JSON.stringify(updatedNotifications));
    } catch (error) {
      console.error('Error adding notification:', error);
    }
  };
  
  // Mark notification as read
  const markAsRead = async (notificationId) => {
    try {
      const updatedNotifications = notifications.map(item =>
        item.id === notificationId ? { ...item, read: true } : item
      );
      
      setNotifications(updatedNotifications);
      await AsyncStorage.setItem('notifications', JSON.stringify(updatedNotifications));
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  };
  
  // Clear all notifications
  const clearNotifications = async () => {
    try {
      setNotifications([]);
      await AsyncStorage.removeItem('notifications');
    } catch (error) {
      console.error('Error clearing notifications:', error);
    }
  };
  
  return (
    <NotificationContext.Provider
      value={{
        token,
        notifications,
        loading,
        addNotification,
        markAsRead,
        clearNotifications,
        refreshToken: getFCMToken,
      }}
    >
      {children}
    </NotificationContext.Provider>
  );
};
Notifications Screen
Create a screen to display notifications:
javascript// src/screens/NotificationsScreen.js

import React from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
} from 'react-native';
import { useNotifications } from '../services/notificationService';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

export default function NotificationsScreen({ navigation }) {
  const { notifications, loading, markAsRead, clearNotifications } = useNotifications();
  
  const renderNotificationItem = ({ item }) => (
    <TouchableOpacity
      style={[styles.notificationItem, !item.read && styles.unreadNotification]}
      onPress={() => {
        markAsRead(item.id);
        // Navigate to relevant screen based on notification data
        if (item.data && item.data.type) {
          switch (item.data.type) {
            case 'project':
              navigation.navigate('ProjectDetails', { 
                projectId: item.data.projectId,
                projectName: item.data.projectName 
              });
              break;
            case 'contact':
              navigation.navigate('ContactDetails', { 
                contactId: item.data.contactId,
                contactName: item.data.contactName 
              });
              break;
            case 'task':
              navigation.navigate('TaskDetails', { 
                taskId: item.data.taskId,
                taskName: item.data.taskName 
              });
              break;
            default:
              // Default action or just mark as read
              break;
          }
        }
      }}
    >
      <View style={styles.notificationIcon}>
        {!item.read && <View style={styles.unreadDot} />}
        <Icon
          name={getIconForNotificationType(item.data?.type)}
          size={24}
          color="#4A90E2"
        />
      </View>
      <View style={styles.notificationContent}>
        <Text style={styles.notificationTitle}>{item.title}</Text>
        <Text style={styles.notificationBody}>{item.body}</Text>
        <Text style={styles.notificationTime}>
          {formatTimestamp(item.timestamp)}
        </Text>
      </View>
    </TouchableOpacity>
  );
  
  const getIconForNotificationType = (type) => {
    switch (type) {
      case 'project':
        return 'briefcase';
      case 'contact':
        return 'account';
      case 'task':
        return 'checkbox-marked-circle';
      case 'file':
        return 'file-document';
      default:
        return 'bell';
    }
  };
  
  const formatTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = Math.floor((now - date) / 1000); // Difference in seconds
    
    if (diff < 60) {
      return 'Just now';
    } else if (diff < 3600) {
      const minutes = Math.floor(diff / 60);
      return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;
    } else if (diff < 86400) {
      const hours = Math.floor(diff / 3600);
      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;
    } else if (diff < 604800) {
      const days = Math.floor(diff / 86400);
      return `${days} ${days === 1 ? 'day' : 'days'} ago`;
    } else {
      // Format date for older notifications
      return date.toLocaleDateString();
    }
  };
  
  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Notifications</Text>
        {notifications.length > 0 && (
          <TouchableOpacity 
            style={styles.clearButton}
            onPress={() => {
              clearNotifications();
            }}
          >
            <Text style={styles.clearButtonText}>Clear All</Text>
          </TouchableOpacity>
        )}
      </View>
      
      {loading ? (
        <ActivityIndicator style={styles.loader} size="large" color="#4A90E2" />
      ) : (
        <FlatList
          data={notifications}
          keyExtractor={(item) => item.id}
          renderItem={renderNotificationItem}
          ListEmptyComponent={
            <View style={styles.emptyContainer}>
              <Icon name="bell-off" size={48} color="#CCC" />
              <Text style={styles.emptyText}>No notifications yet</Text>
            </View>
          }
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#FFF',
    borderBottomWidth: 1,
    borderBottomColor: '#EEE',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  clearButton: {
    padding: 8,
  },
  clearButtonText: {
    color: '#4A90E2',
    fontWeight: '500',
  },
  loader: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  notificationItem: {
    flexDirection: 'row',
    backgroundColor: '#FFF',
    padding: 16,
    marginVertical: 4,
    marginHorizontal: 10,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
    elevation: 1,
  },
  unreadNotification: {
    backgroundColor: '#EDF5FF',
  },
  notificationIcon: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  unreadDot: {
    position: 'absolute',
    top: 0,
    right: 0,
    width: 10,
    height: 10,
    borderRadius: 5,
    backgroundColor: '#FF3B30',
    zIndex: 1,
  },
  notificationContent: {
    flex: 1,
  },
  notificationTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  notificationBody: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  notificationTime: {
    fontSize: 12,
    color: '#999',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  emptyText: {
    marginTop: 16,
    fontSize: 16,
    color: '#999',
    textAlign: 'center',
  },
});
8. Update Main App with All Components
Integrate all these components into the main app:
javascript// App.js (updated)

import React from 'react';
import { SafeAreaView, StatusBar, StyleSheet } from 'react-native';
import { SuiteDashProvider } from './src/context/SuiteDashContext';
import { NotificationProvider } from './src/services/notificationService';
import AppNavigator from './src/navigation/AppNavigator';

const App = () => {
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" />
      <NotificationProvider>
        <SuiteDashProvider>
          <AppNavigator />
        </SuiteDashProvider>
      </NotificationProvider>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

export default App;
9. Update Navigation to Include Viral Features
javascript// src/navigation/AppNavigator.js (updated)

import React from 'react';
import { TouchableOpacity } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import { useSuiteDash } from '../context/SuiteDashContext';
import { useNotifications } from '../services/notificationService';

// Import screens
import LoadingScreen from '../screens/LoadingScreen';
import ErrorScreen from '../screens/ErrorScreen';
import HomeScreen from '../screens/HomeScreen';
import ContactsScreen from '../screens/ContactsScreen';
import ContactDetailsScreen from '../screens/ContactDetailsScreen';
import ProjectsScreen from '../screens/ProjectsScreen';
import ProjectDetailsScreen from '../screens/ProjectDetailsScreen';
import NotificationsScreen from '../screens/NotificationsScreen';
import ProfileScreen from '../screens/ProfileScreen';

const Stack = createStackNavigator();
const Tab = createBottomTabNavigator();

// Main tab navigation
const TabNavigator = () => {
  const { notifications } = useNotifications();
  const unreadCount = notifications.filter(n => !n.read).length;
  
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;
          
          if (route.name === 'Home') {
            iconName = focused ? 'home' : 'home-outline';
          } else if (route.name === 'Contacts') {
            iconName = focused ? 'account-group' : 'account-group-outline';
          } else if (route.name === 'Projects') {
            iconName = focused ? 'briefcase' : 'briefcase-outline';
          } else if (route.name === 'Notifications') {
            iconName = focused ? 'bell' : 'bell-outline';
          } else if (route.name === 'Profile') {
            iconName = focused ? 'account-circle' : 'account-circle-outline';
          }
          
          return <Icon name={iconName} size={size} color={color} />;
        },
        tabBarActiveTintColor: '#4A90E2',
        tabBarInactiveTintColor: '#999',
        tabBarLabelStyle: {
          fontSize: 12,
        },
      })}
    >
      <Tab.Screen name="Home" component={HomeScreen} options={{ headerShown: false }} />
      <Tab.Screen name="Contacts" component={ContactsStack} options={{ headerShown: false }} />
      <Tab.Screen name="Projects" component={ProjectsStack} options={{ headerShown: false }} />
      <Tab.Screen 
        name="Notifications" 
        component={NotificationsScreen} 
        options={{ 
          headerShown: false,
          tabBarBadge: unreadCount > 0 ? unreadCount : null,
          tabBarBadgeStyle: { backgroundColor: '#FF3B30' }
        }} 
      />
      <Tab.Screen name="Profile" component={ProfileScreen} options={{ headerShown: false }} />
    </Tab.Navigator>
  );
};

// Contacts stack
const ContactsStack = () => (
  <Stack.Navigator>
    <Stack.Screen name="ContactsList" component={ContactsScreen} options={{ title: 'Contacts' }} />
    <Stack.Screen 
      name="ContactDetails" 
      component={ContactDetailsScreen} 
      options={({ route }) => ({ title: route.params.contactName || 'Contact Details' })} 
    />
  </Stack.Navigator>
);

// Projects stack
const ProjectsStack = () => (
  <Stack.Navigator>
    <Stack.Screen name="ProjectsList" component={ProjectsScreen} options={{ title: 'Projects' }} />
    <Stack.Screen 
      name="ProjectDetails" 
      component={ProjectDetailsScreen} 
      options={({ route }) => ({ 
        title: route.params.projectName || 'Project Details',
        headerRight: () => (
          <TouchableOpacity style={{ marginRight: 16 }}>
            <Icon name="share-variant" size={24} color="#4A90E2" />
          </TouchableOpacity>
        ),
      })} 
    />
  </Stack.Navigator>
);

// Main navigation
export default function AppNavigator() {
  const { isLoading, isAuthenticated, error } = useSuiteDash();
  
  // Show loading screen while checking authentication
  if (isLoading) {
    return <LoadingScreen />;
  }
  
  // Show error screen if there's an error
  if (error) {
    return <ErrorScreen message={error} />;
  }
  
  // Show main app navigation if authenticated
  if (isAuthenticated) {
    return (
      <NavigationContainer>
        <TabNavigator />
      </NavigationContainer>
    );
  }
  
  // If not authenticated, show error screen
  return <ErrorScreen message="Authentication failed. Please check your API credentials." />;
}
10. Create a Basic Profile Screen with Referral Feature
javascript// src/screens/ProfileScreen.js

import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Switch, Image } from 'react-native';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import ReferralCode from '../components/ReferralCode';
import { useSuiteDash } from '../context/SuiteDashContext';
import { useNotifications } from '../services/notificationService';

export default function ProfileScreen() {
  const { refreshData } = useSuiteDash();
  const [pushEnabled, setPushEnabled] = React.useState(true);
  const [emailEnabled, setEmailEnabled] = React.useState(true);
  
  const togglePushNotifications = (value) => {
    setPushEnabled(value);
    // Here you would implement the logic to enable/disable push notifications
  };
  
  const toggleEmailNotifications = (value) => {
    setEmailEnabled(value);
    // Here you would implement the logic to enable/disable email notifications
  };
  
  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <View style={styles.avatarContainer}>
          <View style={styles.avatar}>
            <Text style={styles.avatarText}>JD</Text>
          </View>
          <TouchableOpacity style={styles.editButton}>
            <Icon name="pencil" size={16} color="#FFF" />
          </TouchableOpacity>
        </View>
        
        <Text style={styles.name}>John Doe</Text>
        <Text style={styles.email}>john.doe@example.com</Text>
        
        <TouchableOpacity style={styles.refreshButton} onPress={refreshData}>
          <Icon name="refresh" size={20} color="#4A90E2" />
          <Text style={styles.refreshText}>Refresh Data</Text>
        </TouchableOpacity>
      </View>
      
      <ReferralCode />
      
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Notification Settings</Text>
        
        <View style={styles.settingItem}>
          <View style={styles.settingInfo}>
            <Icon name="bell" size={24} color="#4A90E2" style={styles.settingIcon} />
            <Text style={styles.settingText}>Push Notifications</Text>
          </View>
          <Switch
            value={pushEnabled}
            onValueChange={togglePushNotifications}
            trackColor={{ false: '#D1D1D6', true: '#A1C9F7' }}
            thumbColor={pushEnabled ? '#4A90E2' : '#F4F3F4'}
          />
        </View>
        
        <View style={styles.settingItem}>
          <View style={styles.settingInfo}>
            <Icon name="email" size={24} color="#4A90E2" style={styles.settingIcon} />
            <Text style={styles.settingText}>Email Notifications</Text>
          </View>
          <Switch
            value={emailEnabled}
            onValueChange={toggleEmailNotifications}
            trackColor={{ false: '#D1D1D6', true: '#A1C9F7' }}
            thumbColor={emailEnabled ? '#4A90E2' : '#F4F3F4'}
          />
        </View>
      </View>
      
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>About</Text>
        
        <TouchableOpacity style={styles.aboutItem}>
          <Icon name="information" size={24} color="#4A90E2" style={styles.aboutIcon} />
          <Text style={styles.aboutText}>App Information</Text>
          <Icon name="chevron-right" size={20} color="#CCC" />
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.aboutItem}>
          <Icon name="help-circle" size={24} color="#4A90E2" style={styles.aboutIcon} />
          <Text style={styles.aboutText}>Help & Support</Text>
          <Icon name="chevron-right" size={20} color="#CCC" />
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.aboutItem}>
          <Icon name="shield" size={24} color="#4A90E2" style={styles.aboutIcon} />
          <Text style={styles.aboutText}>Privacy Policy</Text>
          <Icon name="chevron-right" size={20} color="#CCC" />
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.aboutItem}>
          <Icon name="file-document" size={24} color="#4A90E2" style={styles.aboutIcon} />
          <Text style={styles.aboutText}>Terms of Service</Text>
          <Icon name="chevron-right" size={20} color="#CCC" />
        </TouchableOpacity>
      </View>
      
      <TouchableOpacity style={styles.logoutButton}>
        <Icon name="logout" size={20} color="#FFF" style={styles.logoutIcon} />
        <Text style={styles.logoutText}>Log Out</Text>
      </TouchableOpacity>
      
      <Text style={styles.versionText}>Version 1.0.0</Text>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    backgroundColor: '#FFF',
    padding: 20,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#EEE',
  },
  avatarContainer: {
    position: 'relative',
    marginBottom: 16,
  },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: '#4A90E2',
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatarText: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#FFF',
  },
  editButton: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    backgroundColor: '#50C878',
    width: 30,
    height: 30,
    borderRadius: 15,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#FFF',
  },
  name: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  email: {
    fontSize: 16,
    color: '#666',
    marginBottom: 16,
  },
  refreshButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
  },
  refreshText: {
    marginLeft: 8,
    color: '#4A90E2',
    fontWeight: '500',
  },
  section: {
    backgroundColor: '#FFF',
    marginHorizontal: 16,
    marginVertical: 16,
    borderRadius: 10,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 16,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#EEE',
  },
  settingInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingIcon: {
    marginRight: 16,
  },
  settingText: {
    fontSize: 16,
    color: '#333',
  },
  aboutItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#EEE',
  },
  aboutIcon: {
    marginRight: 16,
  },
  aboutText: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  logoutButton: {
    marginHorizontal: 16,
    marginVertical: 16,
    backgroundColor: '#FF3B30',
    borderRadius: 8,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
  },
  logoutIcon: {
    marginRight:RetryClaude hit the max length for a message and has paused its response. You can write Continue to keep the chat going.IHow can I successfully build this?EditSteps to Successfully Build Your SuiteDash Mobile App
Here's a step-by-step guide to successfully build your viral mobile app that leverages SuiteDash as the backend:
1. Setup Your SuiteDash Account First
Before you start coding:

Subscribe to an appropriate SuiteDash plan (preferably Thrive or Pinnacle for adequate API limits)
Set up your API credentials:

Go to Flyout Menu > Integrations
Select "Secure API"
Create a new Secret Key
Note down your Public ID and Secret Key



2. Development Environment Setup
bash# Install development dependencies
npm install -g react-native-cli

# Create a new React Native project
npx react-native init SuiteDashApp

# Navigate to the project directory
cd SuiteDashApp

# Install required dependencies
npm install axios @react-navigation/native @react-navigation/stack @react-navigation/bottom-tabs
npm install react-native-screens react-native-safe-area-context
npm install @react-native-async-storage/async-storage
npm install react-native-gesture-handler
npm install react-native-reanimated
npm install react-native-vector-icons
npm install @react-native-firebase/app @react-native-firebase/messaging
3. Create Your Project Structure
Organize your project with these folders:
src/
├── components/      # Reusable UI components
├── context/         # React Context providers
├── navigation/      # Navigation configuration
├── screens/         # App screens
├── services/        # API and other services
└── utils/           # Helper functions
4. Create Configuration Files
Create a configuration file to store your SuiteDash API credentials:
javascript// src/config/suiteDashConfig.js

export default {
  API_BASE_URL: 'https://app.suitedash.com/secure-api',
  PUBLIC_ID: 'YOUR_PUBLIC_ID',   // Replace with your actual Public ID
  SECRET_KEY: 'YOUR_SECRET_KEY', // Replace with your actual Secret Key
  
  // API call limits based on your plan
  API_LIMITS: {
    // Adjust based on your SuiteDash plan
    CALLS_PER_MONTH: 2000,      // Example for Thrive plan
    THROTTLE_CALLS: true,       // Enable throttling to prevent hitting limits
    MAX_CALLS_PER_MINUTE: 30,   // Conservative limit to prevent rate limiting
  }
};
5. Implement the Services Layer
Implement the API service as shown in the previous examples, making sure to:

Use proper authentication headers
Implement caching for offline functionality
Handle API rate limiting
Add error handling

6. Implement the Core Screens
Follow these implementation steps:

Start with the Home Screen - Create a dashboard that links to all major features
Implement the Contacts Screen - Display contacts from SuiteDash
Add Project Management - Implement project listing and details
Add File Management - Allow users to view and upload files
Implement Task Management - Let users manage tasks from SuiteDash

7. Add Viral Features
Implement these viral features to increase user engagement:

Social Sharing - Implement the sharing component for projects, files, etc.
Referral System - Add the referral code component to the profile screen
Push Notifications - Set up Firebase for push notifications
Offline Mode - Ensure your app works offline using AsyncStorage caching
Deep Linking - Configure your app to open specific screens from notifications

8. Testing Your App
Thoroughly test your app:
bash# Run the app on iOS simulator
npx react-native run-ios

# Run the app on Android emulator
npx react-native run-android

# Run tests
npm test
9. Performance Optimization
Optimize your app for production:

Enable Hermes engine for better React Native performance
Implement pagination for large datasets
Optimize image loading with proper caching
Minimize API calls using batch operations where possible
Reduce bundle size with code splitting techniques

10. Deployment
Prepare for deployment:
bash# Generate a release build for Android
cd android && ./gradlew assembleRelease

# Generate a release build for iOS
# Use Xcode to archive and distribute your app
11. Backend Integration Considerations
To successfully integrate with SuiteDash:

Study the API documentation - Explore all available endpoints in the SuiteDash Secure API documentation
Monitor API usage - Keep track of your API call limits
Implement proper authentication - Store API keys securely
Add error handling - Gracefully handle API errors and rate limiting
Consider a middleware layer - For complex operations, you might want to create a small server to act as middleware between your app and SuiteDash